"""
- [ ] add tool calling
"""

import time
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Iterator, List, Optional, Tuple, Union, Any

import numpy as np
import openai
from loguru import logger
from openai._streaming import Stream
from openai.lib._parsing import ResponseFormatT
from openai.resources.beta.chat.completions import ChatCompletionStreamManager
from openai.types.chat.chat_completion import ChatCompletion
from openai.types.chat.chat_completion_chunk import ChatCompletionChunk, ChoiceDelta
from pydantic import BaseModel, Field
from tqdm import tqdm

from .client_base import BaseClient

# see default values in https://platform.openai.com/docs/api-reference/chat/create
OPENAI_DEFAULT_CONFIG = {
    "messages": [],  # required
    "model": "gpt-4o",
    "frequency_penalty": 0.0,  # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    "max_completion_tokens": None,
    "n": 1,
    "presence_penalty": 0.0,  # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    "seed": None,
    "stream": False,
    "temperature": 0.5,  # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    "top_p": 1.0,  # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    "tools": [],  # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    "tool_choice": "auto",  # Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
    "parallel_tool_calls": False,  # Whether to call tools in parallel.
    "logit_bias": None,  # Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    "logprobs": False,  # Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    "top_logprobs": None,  # An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    "stop": None,  # Up to 4 sequences where the model will stop generating further tokens. The returned text will not contain these sequences.
}


class OpenAIClient(BaseClient):
    base_url: str = Field(default="https://api.openai.com/v1")
    api_key: Optional[str] = None

    kwargs: Dict = Field(default_factory=dict)

    retries: int = Field(default=3)
    backoff_factor: float = Field(default=0.5)
    n_thread: int = Field(default=5)

    client: Optional[openai.OpenAI] = None

    def model_post_init(self, __context: Any) -> None:
        super().model_post_init(__context)
        # 1. init client
        if not self.api_key:
            logger.warning(f"[WARNING] api_key is None, please set it in the environment variable (OPENAI_API_KEY) or pass it as a parameter.")
        self.client = openai.OpenAI(api_key=self.api_key, base_url=self.base_url)

        # 2. setup kwargs
        if set(self.kwargs.keys()) - set(OPENAI_DEFAULT_CONFIG.keys()):
            logger.warning(f"WARNING: {set(self.kwargs.keys()) - set(OPENAI_DEFAULT_CONFIG.keys())} are not supported by OpenAI API")
        self.kwargs = {**OPENAI_DEFAULT_CONFIG, **self.kwargs}

    def _process_openai_kwargs(self, kwargs: Dict) -> Dict:
        # support query or messages
        if "query" in kwargs:
            kwargs["messages"] = self._process_text_or_conv(kwargs["query"])
            del kwargs["query"]
        # set default kwargs
        default_kwargs = self.kwargs
        if set(kwargs.keys()) - set(default_kwargs.keys()):
            logger.warning(f"WARNING: {set(kwargs.keys()) - set(default_kwargs.keys())} are not supported by OpenAI API")
        kwargs = {**default_kwargs, **kwargs}
        # tackle with tools
        if not kwargs["tools"]:
            del kwargs["tools"], kwargs["tool_choice"]
        return kwargs

    def _process_text_or_conv(self, query: str = None, messages: List[Dict] = None):
        if query:
            messages = [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": query}]
        else:
            assert messages is not None, "query or messages should be specified"
        return messages

    # -----------------------------------------------------------------------------------------------------------
    def chat_completions_create(self, **kwargs) -> ChatCompletion | Stream[ChatCompletionChunk]:
        """Wrap the `chat.completions.create` API, with default kwargs & the support of query or messages

        Args:
            query | messages: the input query or messages
            **kwargs: the kwargs to pass to the OpenAI API

        Usage::

            stream = client.chat_completions_create(query="Hello, how are you?", stream=True)
            collected_deltas = []  # the list to save the deltas
            for delta_str in self.stream_generator(stream, collected_deltas):
                print(delta_str, end="", flush=True)
            response, action, action_input = self.proces_collected_deltas(collected_deltas)
        """
        kwargs = self._process_openai_kwargs(kwargs)
        return self.client.chat.completions.create(**kwargs)

    def beta_chat_completions_stream(self, **kwargs) -> ChatCompletionStreamManager[ResponseFormatT]:
        kwargs = self._process_openai_kwargs(kwargs)
        return self.client.beta.chat.completions.stream(**kwargs)

    def stream_generator(self, response: Stream[ChatCompletionChunk], collected_deltas: List[ChoiceDelta] = None) -> Iterator[str]:
        """yield str from ChatCompletionChunk, and save the deltas to `collected_deltas`
        Args:
            response: the stream response from OpenAI
            collected_deltas: the list to save the deltas
        """
        for chunk in response:
            # print(f"> chunk: {chunk}") TODO: fix the error of none from 4o-mini
            delta = chunk.choices[0].delta
            if collected_deltas is not None:
                collected_deltas.append(delta)

            if delta.content:
                yield delta.content
            elif delta.tool_calls:
                function = delta.tool_calls[0].function
                if function.name:
                    yield f"<API>{function.name}</API>"
                elif function.arguments:
                    yield function.arguments

    def proces_collected_deltas(self, collected_deltas: List[ChoiceDelta]) -> Tuple[str, str, str]:
        """process the collected deltas to get the response, action, and action_input
        Args:
            collected_deltas: the list of deltas
        Returns:
            response, action, action_input
        """
        response, action, action_input = "", "", ""
        for delta in collected_deltas:
            if delta.tool_calls:
                # TODO: deal with multiple tool calls
                function = delta.tool_calls[0].function
                if function.name:
                    action = function.name
                elif function.arguments:
                    action_input += function.arguments
            elif delta.content:
                response += delta.content
        return response, action, action_input

    # -----------------------------------------------------------------------------------------------------------
    def query_one_raw(self, query: str = None, messages: List[Dict] = None, **kwargs) -> ChatCompletion:
        """DEPRECATED! use chat_completions_create instead"""
        kwargs["messages"] = self._process_text_or_conv(query, messages)
        kwargs = self._process_openai_kwargs(kwargs)
        chat_completion: ChatCompletion = self.chat_completions_create(**kwargs)
        return chat_completion

    def query_one(
        self, query: str = None, messages: List[Dict] = None, return_model=False, return_usage=False, **kwargs
    ) -> Union[str, Tuple[str, ...]]:
        """Get one response from OpenAI-fashion API
        Args:
            query or messages: input
            return_model, return_usage: control the output
        """
        kwargs["messages"] = self._process_text_or_conv(query, messages)
        kwargs = self._process_openai_kwargs(kwargs)
        kwargs["stream"] = False  # assert stream is False
        # make query with retries
        for attempt in range(self.retries):
            try:
                chat_completion: ChatCompletion = self.chat_completions_create(**kwargs)
                break
            except Exception as e:
                logger.error(f"Attempt {attempt + 1} failed with error: {e}")
                time.sleep(self.backoff_factor * (2**attempt))
        else:
            raise Exception(f"Failed to get response after {self.retries} attempts.")
        # prepare the output
        if not return_model and not return_usage:
            return chat_completion.choices[0].message.content
        res = (chat_completion.choices[0].message.content,)
        if return_usage:
            return_model = True
        if return_model:
            res = res + (chat_completion.model,)
            if return_usage:
                res = res + (chat_completion.usage.to_dict(),)
        return res

    def query_one_stream(self, query: str = None, messages: List[Dict] = None, **kwargs) -> Iterator[str]:
        kwargs["messages"] = self._process_text_or_conv(query, messages)
        kwargs["stream"] = True
        response = self.chat_completions_create(**kwargs)

        def stream_generator(response) -> Iterator[str]:
            for chunk in response:
                yield chunk.choices[0].delta.content or ""

        return stream_generator(response)

    def query_many(self, texts, stop=None, temperature=None, model_id=None) -> list:
        with ThreadPoolExecutor(max_workers=self.n_thread) as executor:
            results = list(tqdm(executor.map(lambda x: self.query_one(x, stop, temperature, model_id), texts), total=len(texts), desc="Querying"))
        return results

    # -----------------------------------------------------------------------------------------------------------
    def embed_one(self, text: str) -> np.ndarray:
        text = text.replace("\n", " ")
        embedding_resp = None
        for attempt in range(self.retries):
            try:
                embedding_resp = self.client.embeddings.create(model=self.model, input=[text])
                break
            except Exception as e:
                logger.error(f"Attempt {attempt + 1} failed with error: {e}")
                time.sleep(self.backoff_factor * (2**attempt))
        else:
            raise Exception(f"Failed to get response after {self.retries} attempts.")
        embedding = np.array(embedding_resp.data[0].embedding)
        return embedding

    def embed_batch(self, texts: list) -> np.ndarray:
        """
        Embed a batch of texts based on OpenAI API.

        Args:
            texts: list of texts to embed

        Returns:
            embeddings of the texts
        """
        with ThreadPoolExecutor(max_workers=self.n_thread) as executor:
            results = list(tqdm(executor.map(lambda x: self.embed_one(x), texts), total=len(texts), desc="Querying"))
        return np.array(results)
